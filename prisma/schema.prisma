generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  role           Role            @default(USER)
  hashedPassword String
  accounts       Account[]
  sessions       Session[]
  folders        Folder[]
  File           File[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   Int      @id @default(autoincrement())
  credentialID         String   @unique
  userId               String
  loginTime            DateTime @default(now())
  ipAddress            String?
  deviceInfo           String?
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id        Int      @id @default(autoincrement())
  key       String   @unique // Chave hierárquica única (exemplo: "1", "11", "111")
  name      String
  path      String
  parentKey String? // Chave da pasta pai (null para pastas raiz)
  userId    String // Relaciona com o id do usuário
  user      User     @relation(fields: [userId], references: [id])
  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Self-relation for subfolders
  parent     Folder?  @relation("FolderToSubfolder", fields: [parentKey], references: [key], onDelete: Restrict)
  subfolders Folder[] @relation("FolderToSubfolder")
}

model File {
  id        Int      @id @default(autoincrement())
  fileData  Json // Campo JSON para armazenar os dados do arquivo
  folderKey String // Relaciona com a key da pasta pai
  folder    Folder   @relation(fields: [folderKey], references: [key])
  userId    String // Relaciona com o id do usuário
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
